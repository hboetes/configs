$terminal = terminator
$lb = ~/.local/bin

autogenerated = 0
ecosystem:no_update_news = true

monitor = eDP-1, 1920x1200, 0x0, 1
########
# ENVS #
########

# QT
env = QT_QPA_PLATFORM,wayland;xcb
# env = QT_AUTO_SCREEN_SCALE_FACTOR,1
env = QT_QPA_PLATFORMTHEME,qt5ct
env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1

# XDG
env = XDG_CURRENT_DESKTOP,Hyprland
env = XDG_SESSION_TYPE,wayland
env = XDG_SESSION_DESKTOP,Hyprland

# GDK/XDG
env = TDESKTOP_DISABLE_GTK_INTEGRATION,1
env = GDK_BACKEND,wayland,x11
env = SDL_VIDEODRIVER,wayland
env = CLUTTER_BACKEND,wayland
env = XCURSOR_SIZE,20

# OTHER
env = MOZ_ENABLE_WAYLAND,1

# Startup: The exec-once command ensures the program only runs once
# when Hyprland starts up, regardless of whether you include the & or
# not. In fact, it's cleaner to omit the & since it's redundant in
# this context.
exec-once = sleep 5; rfkill block bluetooth; rfkill unblock bluetooth
exec-once = $HOME/.config/hypr/scripts/startup.sh
exec-once = hyprctl setcursor Bibata-Modern-Ice 20
exec-once = hyprpm reload
exec-once = $lb/wallpaper
exec-once = mako
exec-once = wl-paste -t UTF8_STRING --watch clipman store
exec-once = wl-paste -t UTF8_STRING -pw wl-copy
exec-once = blueman-applet
exec-once = nm-applet --indicator
exec-once = systemctl --user start hyprpolkitagent
exec-once = dbus-update-activation-environment --systemd HYPRLAND_INSTANCE_SIGNATURE
exec-once = wlsunset -l 46.8 -L 15.5 -t 3000

# exec lines are also executed at restart, and after saving the config.
exec = pkill waybar; waybar -c ~/.config/waybar/hyprland

# Input configuration
input {
    kb_layout  = eu,us,de
    kb_model   = pc105
    kb_options = compose:rctrl,srvkeys:none,caps:none

    # https://wiki.hyprland.org/Configuring/Variables/#touchpad
    touchpad {
             #dwt = true
             #tap = true
    }
}

general {
    gaps_in = 4
    gaps_out = 8
    border_size = 1
    col.active_border = rgb(99784c)
    col.inactive_border = rgb(333333)
    layout = dwindle
    resize_on_border = true
}

workspace = w[tv1], gapsout:0, gapsin:0
workspace = f[1], gapsout:0, gapsin:0
windowrulev2 = bordersize 0, onworkspace:w[tv1]
windowrulev2 = rounding 0, onworkspace:w[tv1]
windowrulev2 = bordersize 0, onworkspace:f[1]
windowrulev2 = rounding 0, onworkspace:f[1]
windowrulev2 = size 800 600,class:^(terminator)$,floating:1
windowrulev2 = maxsize 800 600,class:^(terminator)$,floating:1

cursor {
        no_warps = true
        inactive_timeout = 3
}

decoration {
    rounding = 10

        shadow {
                enabled = true
                range = 6
                render_power = 2
                ignore_window = true
                color = rgba(1a1a1aee)
        }

        blur {
                enabled = true
                size = 1
                passes = 3
                special = true
        }
}

animations {
    enabled = yes

    # Simple, linear bezier curve - no overshooting
    bezier = linear, 0.0, 0.0, 1.0, 1.0

    # Clean, predictable animations
    animation = windows, 1, 3, linear
    animation = border, 1, 3, linear
    animation = fade, 1, 3, linear
    animation = workspaces, 1, 3, linear
}

dwindle {
    pseudotile = true
    preserve_split = true
}

############
# BINDINGS #
############
$mod = SUPER

# Basics
bind = $mod, p, pseudo,
bind = $mod, q, killactive,
bind = $mod, i, fullscreen,
bind = $mod, t, togglesplit,
bind = $mod SHIFT, f, togglefloating,
bind = $mod, f, fullscreen
bind = $mod SHIFT, e, exit,

# Apps
bind = $mod, RETURN, exec, $terminal

# Cycle through workspaces
bind = $mod, slash, workspace, m+1
bind = $mod, z, workspace, m-1
bind = $mod, s, togglespecialworkspace

# Window movement
bind = $mod SHIFT, left, movewindow, l
bind = $mod SHIFT, right, movewindow, r
bind = $mod SHIFT, down, movewindow, d
bind = $mod SHIFT, up, movewindow, u
bind = $mod SHIFT, s, movetoworkspace, special

# Window movement and resizement
bindm = $mod, mouse:272, movewindow
bindm = $mod, mouse:273, resizewindow

bind = ,code:232, exec, $lb/backlight -
bind = ,code:233, exec, $lb/backlight +

# XXX
bind = $mod CTRL, left, resizeactive, -20 0
bind = $mod CTRL, up, resizeactive, 0 -20
bind = $mod CTRL, down, resizeactive, 0 20
bind = $mod CTRL, right, resizeactive, 20 0

# Switch keyboard layouts
bind = $mod, k, exec, hyprctl switchxkblayout at-translated-set-2-keyboard next

# Lid switches
bindl = , switch:Lid Switch, exec, hyprlock
# bindl = , switch:on:Lid Switch, exec, hyprctl keyword monitor "eDP-1, disable"
# bindl = , switch:off:Lid Switch, exec, hyprctl keyword monitor "eDP-1, preferred, 2048x0, 1.25"
# bindl = , switch:off:Lid Switch, exec, hyprctl keyword monitor "eDP-1, preferred, 3200x900, 1.25"

# Use "hyprctl clients" to find the title/class etc.
windowrulev2=float, title:Volume Control
windowrulev2=move 100%-w-20 50, title:Volume Control

windowrulev2=float, class:blueman-manager
windowrulev2=size 530 450, class:blueman-manager
windowrulev2=move 100%-w-20 50, class:blueman-manager

windowrulev2=fullscreen, title:nicotine@framboos



# Blurry layers
layerrule = blur, waybar
layerrule = blur, notifications
layerrule = ignorezero, notifications

# Plugins
plugin {
    split-monitor-workspaces {
        count = 5
        keep_focused = 0
        enable_notifications = 0
        enable_persistent_workspaces = 1
    }

    overview {
                # Behavior
                exitOnSwitch = true
                showNewWorkspace = false
                # Style
                panelHeight = 150
                overrideGaps = true
                gapsOut = 30
                gapsIn = 10
    }
}

# toggle between tabbing and stacking
bind = $mod, t, togglegroup

# kill focused window
bind = $mod SHIFT, q, killactive

bind = $mod, d, exec, $($lb/dmenu)
bind = $mod SHIFT, d, exec, rofi -show drun -show-icons
bind = $mod, c, exec, rofi -fake-transparency -show run
bind = $mod, g, exec, rofi -fake-transparency -show ssh
bind = $mod, m, exec, rofi -fake-transparency -show window

# alternatively, you can use the cursor keys:
bind = $mod, left,  movefocus, l
bind = $mod, down,  movefocus, d
bind = $mod, up,    movefocus, u
bind = $mod, right, movefocus, r

# move focused window
bind = $mod SHIFT, left, movewindow, l
bind = $mod SHIFT, down, movewindow, d
bind = $mod SHIFT, up, movewindow, u
bind = $mod SHIFT, right, movewindow, r

# bind = $mod, l, exec, $lb/lockmeup
bind = $mod, l, exec, hyprlock
bind = $mod, Print, exec, $lb/swayshot $(echo -e 'display\nwindow\nregion\ndisplay upload\nwindow upload\nregion upload' | rofi -dmenu)

bind = $mod, x, exec, $lb/shhttt
# bind = $mod, prior, exec "$lb/volume +" # WARNING: Command may need manual adjustment
# bind = $mod, next, exec "$lb/volume -" # WARNING: Command may need manual adjustment
bind = $mod, h, exec, makoctl restore

workspace=1
workspace=2
workspace=3
workspace=4
workspace=5
workspace=6
workspace=7
workspace=8
workspace=9
workspace=10

# switch to workspace
bind = $mod, 1, workspace, 1
bind = $mod, 2, workspace, 2
bind = $mod, 3, workspace, 3
bind = $mod, 4, workspace, 4
bind = $mod, 5, workspace, 5
bind = $mod, 6, workspace, 6
bind = $mod, 7, workspace, 7
bind = $mod, 8, workspace, 8
bind = $mod, 9, workspace, 9
bind = $mod, 0, workspace, 10

# move focused container to workspace
bind = $mod SHIFT, 1, movetoworkspace, 1
bind = $mod SHIFT, 2, movetoworkspace, 2
bind = $mod SHIFT, 3, movetoworkspace, 3
bind = $mod SHIFT, 4, movetoworkspace, 4
bind = $mod SHIFT, 5, movetoworkspace, 5
bind = $mod SHIFT, 6, movetoworkspace, 6
bind = $mod SHIFT, 7, movetoworkspace, 7
bind = $mod SHIFT, 8, movetoworkspace, 8
bind = $mod SHIFT, 9, movetoworkspace, 9
bind = $mod SHIFT, 0, movetoworkspace, 10


# # Keybinds
bind = $mod, y, exec, clipman --primary pick --tool rofi || notify-send -t 1000 'clipboard is empty'
bind = $mod SHIFT, y, exec, $lb/clipboard_clear
bind = $mod ALT, y, exec, clipman clear --primary -t rofi
bind = $mod CTRL, y, exec, : | wl-copy -p
# bind = $mod, p, exec $lb/i3exit   $(echo 'suslock\nsuspend\nlock\nlogout\nreboot\nshutdown' | rofi -dmenu) # WARNING: Command may need manual adjustment
bind = $mod SHIFT, slash, exec, $terminal -e 'hyprctl clients && read -sk1'

# passthrough mode
bind = $mod SHIFT, p, submap, passthrough
# Define the passthrough submap
submap = passthrough
# Use the same key combo to return to the default submap
bind = $mod SHIFT, p, submap, reset
# Reset submap to default
submap = reset
